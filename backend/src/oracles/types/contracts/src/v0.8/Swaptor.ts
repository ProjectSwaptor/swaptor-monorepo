/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import {
  PromiseOrValue,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
  OnEvent,
} from "../../../../../common/common.types";

export interface SwaptorInterface extends utils.Interface {
  functions: {
    "cancelSwap(bytes,bytes)": FunctionFragment;
    "feeInUsd()": FunctionFragment;
    "freeTrialEndTime()": FunctionFragment;
    "initialize(uint256,uint256,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setFreeTrialEndTime(uint256)": FunctionFragment;
    "signatureUsed(bytes)": FunctionFragment;
    "swapERC20ForERC20(bytes,bytes)": FunctionFragment;
    "swapERC20ForERC721(bytes,bytes)": FunctionFragment;
    "swapERC721ForERC20(bytes,bytes)": FunctionFragment;
    "swapERC721ForERC721(bytes,bytes)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "cancelSwap"
      | "feeInUsd"
      | "freeTrialEndTime"
      | "initialize"
      | "owner"
      | "renounceOwnership"
      | "setFreeTrialEndTime"
      | "signatureUsed"
      | "swapERC20ForERC20"
      | "swapERC20ForERC721"
      | "swapERC721ForERC20"
      | "swapERC721ForERC721"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelSwap",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "feeInUsd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "freeTrialEndTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFreeTrialEndTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "signatureUsed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapERC20ForERC20",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapERC20ForERC721",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapERC721ForERC20",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "swapERC721ForERC721",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "cancelSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeInUsd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freeTrialEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFreeTrialEndTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signatureUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapERC20ForERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapERC20ForERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapERC721ForERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapERC721ForERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SwapCancelled(string)": EventFragment;
    "SwapDetails(string,address,address,uint256,uint256,uint256)": EventFragment;
    "SwapParticipants(string,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapDetails"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapParticipants"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SwapCancelledEventObject {
  id: string;
}
export type SwapCancelledEvent = TypedEvent<[string], SwapCancelledEventObject>;

export type SwapCancelledEventFilter = TypedEventFilter<SwapCancelledEvent>;

export interface SwapDetailsEventObject {
  id: string;
  offeredERC721: string;
  wantedERC721: string;
  offeredTokenData: BigNumber;
  wantedTokenData: BigNumber;
  expirationTime: BigNumber;
}
export type SwapDetailsEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  SwapDetailsEventObject
>;

export type SwapDetailsEventFilter = TypedEventFilter<SwapDetailsEvent>;

export interface SwapParticipantsEventObject {
  id: string;
  seller: string;
  buyer: string;
}
export type SwapParticipantsEvent = TypedEvent<
  [string, string, string],
  SwapParticipantsEventObject
>;

export type SwapParticipantsEventFilter =
  TypedEventFilter<SwapParticipantsEvent>;

export interface Swaptor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SwaptorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    cancelSwap(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeInUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    freeTrialEndTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _feeInUsd: PromiseOrValue<BigNumberish>,
      _freeTrialEndTime: PromiseOrValue<BigNumberish>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFreeTrialEndTime(
      _freeTrialEndTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signatureUsed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swapERC20ForERC20(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapERC20ForERC721(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapERC721ForERC20(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapERC721ForERC721(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  cancelSwap(
    _data: PromiseOrValue<BytesLike>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeInUsd(overrides?: CallOverrides): Promise<BigNumber>;

  freeTrialEndTime(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _feeInUsd: PromiseOrValue<BigNumberish>,
    _freeTrialEndTime: PromiseOrValue<BigNumberish>,
    _priceFeed: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFreeTrialEndTime(
    _freeTrialEndTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signatureUsed(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swapERC20ForERC20(
    _data: PromiseOrValue<BytesLike>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapERC20ForERC721(
    _data: PromiseOrValue<BytesLike>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapERC721ForERC20(
    _data: PromiseOrValue<BytesLike>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapERC721ForERC721(
    _data: PromiseOrValue<BytesLike>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    _recipient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelSwap(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeInUsd(overrides?: CallOverrides): Promise<BigNumber>;

    freeTrialEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _feeInUsd: PromiseOrValue<BigNumberish>,
      _freeTrialEndTime: PromiseOrValue<BigNumberish>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setFreeTrialEndTime(
      _freeTrialEndTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signatureUsed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swapERC20ForERC20(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapERC20ForERC721(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapERC721ForERC20(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapERC721ForERC721(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SwapCancelled(string)"(
      id?: PromiseOrValue<string> | null
    ): SwapCancelledEventFilter;
    SwapCancelled(id?: PromiseOrValue<string> | null): SwapCancelledEventFilter;

    "SwapDetails(string,address,address,uint256,uint256,uint256)"(
      id?: PromiseOrValue<string> | null,
      offeredERC721?: PromiseOrValue<string> | null,
      wantedERC721?: PromiseOrValue<string> | null,
      offeredTokenData?: null,
      wantedTokenData?: null,
      expirationTime?: null
    ): SwapDetailsEventFilter;
    SwapDetails(
      id?: PromiseOrValue<string> | null,
      offeredERC721?: PromiseOrValue<string> | null,
      wantedERC721?: PromiseOrValue<string> | null,
      offeredTokenData?: null,
      wantedTokenData?: null,
      expirationTime?: null
    ): SwapDetailsEventFilter;

    "SwapParticipants(string,address,address)"(
      id?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null
    ): SwapParticipantsEventFilter;
    SwapParticipants(
      id?: PromiseOrValue<string> | null,
      seller?: PromiseOrValue<string> | null,
      buyer?: PromiseOrValue<string> | null
    ): SwapParticipantsEventFilter;
  };

  estimateGas: {
    cancelSwap(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeInUsd(overrides?: CallOverrides): Promise<BigNumber>;

    freeTrialEndTime(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _feeInUsd: PromiseOrValue<BigNumberish>,
      _freeTrialEndTime: PromiseOrValue<BigNumberish>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFreeTrialEndTime(
      _freeTrialEndTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signatureUsed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapERC20ForERC20(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapERC20ForERC721(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapERC721ForERC20(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapERC721ForERC721(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelSwap(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeInUsd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    freeTrialEndTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _feeInUsd: PromiseOrValue<BigNumberish>,
      _freeTrialEndTime: PromiseOrValue<BigNumberish>,
      _priceFeed: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFreeTrialEndTime(
      _freeTrialEndTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signatureUsed(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapERC20ForERC20(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapERC20ForERC721(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapERC721ForERC20(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapERC721ForERC721(
      _data: PromiseOrValue<BytesLike>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      _recipient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
